import multiprocessing
import time
import random
import os
import math

def sd(sd_pipes, sd_pipes2, q, sqid):
    x=random.randrange(100)+1
    y=random.randrange(100)+1
    z=0
    pos = [x,y,z,os.getpid()]
    sqid.put(pos)                       #sends SD coords and PID to main
    print ("SD#",os.getpid(), "located at (x,y,z):",x,y,z)
    while True:
        for i in range(len(sd_pipes)):                  #loop through each connection in the grid
            #writing to UD                 
            my_data = [os.getpid()]
            sd_pipes[i][0].send(my_data)              #send the timestamp into the pipe for each connection in the grid
            time.sleep(.1)                           #wait .5s
            
            #reading back 
            my_data = sd_pipes2[i][1].recv()     # recieve data from UD
            x2=pow((x-my_data[2]),2)
            y2=pow((y-my_data[3]),2)
            z2=pow((z-my_data[4]),2)
            distance = math.sqrt(x2+y2+z2)
            my_data.pop(4)
            my_data.pop(3)
            my_data.pop(2)
            my_data.append(distance)
            
            #write to main
            q.put(my_data)                      #sends back to main
            time.sleep(1)
        
        time.sleep(1)                               #wait 5s
       
def ud(ud_pipes, ud_pipes2, uqid):
    #stores the PID for the UD
    uqid.put(os.getpid())
    concat_data = []
    x=random.randrange(100)+1
    y=random.randrange(100)+1
    z=-(random.randrange(90)+10)
    print ("UD#",os.getpid(), "located at (x,y,z):",x,y,z)
    while True:
        for i in range (len(ud_pipes)):             #check all SD connections for input
            #reading & internal logic
            concat_data = ud_pipes[i][1].recv()          #once something is in the pipe, store it in t1
            concat_data.append(os.getpid())         # store the id in the data
            concat_data.append(x)
            concat_data.append(y)
            concat_data.append(z)

            #writing back
            ud_pipes2[i][0].send(concat_data)       #send the timestamp and UD PID back
            time.sleep(1)

######################################            
####### THIS IS JUST A FUNCTION ######
######################################

def calcSDdistance(xGrid,yGrid,zGrid, i1, i2): #i1, i2 are indices // xGrid,yGrid,zGrid are positions of SDs where each index is 1 SD
    xdif=pow(xGrid[i1]-xGrid[i2], 2)
    ydif=pow(yGrid[i1]-yGrid[i2], 2)
    zdif=pow(zGrid[i1]-zGrid[i2], 2)
    distance = math.sqrt(xdif+ydif+zdif)
    return distance

def assembleSDdGrid(sdx,sdy,sdz,i1,i2,i3):
    s1 = calcSDdistance(sdx,sdy,sdz, i1, i2)
    s2 = calcSDdistance(sdx,sdy,sdz, i1, i3)
    s3 = calcSDdistance(sdx,sdy,sdz, i2, i3)
    SDdGrid= [s1,s2,s3]
    return SDdGrid

def GPSfunc(dGrid, originalPos, sd_coords, ud_pid, sd_pids):
    global sd_ids
    
    #dGrid has all the distances to the point, sdGrid has all the SD_PIDs, SDdGrid has distances between points
    
    #THIS LOGIC WAS STOLEN FROM https://math.stackexchange.com/questions/2969363/finding-a-4th-point-in-3d-space-knowing-3-other-points-and-2-distances-to-the-4t
    #ALL CODE IS ORIGINAL, BUT MATH IS NOT MINE
    
    
    #decompile sd_coords
    [sd_xpos, sd_ypos, sd_zpos] = sd_coords
    sd1 = [ sd_xpos[0] , sd_ypos[0] , sd_zpos[0] ]
    sd2 = [ sd_xpos[1] , sd_ypos[1] , sd_zpos[1] ]
    sd3 = [ sd_xpos[2] , sd_ypos[2] , sd_zpos[2] ]
    SDdGrid = assembleSDdGrid(sd_xpos, sd_ypos, sd_zpos,0,1,2)
    
    #remap coordinate system to [0,0,0] , [U,0,0], [Vx,Vy,0]
    [s1, s2, s3] = SDdGrid
    myY = pow(s1,2)+pow(s2,2)-pow(s3,2)
    myY/= (2*s1)
    myX = math.sqrt(pow(s2,2)-pow(myY,2))
    Vx = myX    #i
    Vy = myY    #j
    U = s1      #h
    [d1, d2, d3] = dGrid
    
    #creating normal vectors e1hat e2hat e3hat
    
    e1bar = [ sd2[0]-sd1[0], sd2[1]-sd1[1], sd2[2]-sd1[2] ]
    #calculating normal of e1bar
    e1barNorm = math.sqrt(pow(e1bar[0],2)+pow(e1bar[1],2)+pow(e1bar[2],2))
    #e1hat = e1bar/e1barNorm
    e1hat = [ e1bar[0]/e1barNorm , e1bar[1]/e1barNorm , e1bar[2]/e1barNorm]
    
    #the vector v3-v1 is used twice, so it is named v3_minus_v1
    v3_minus_v1 = [ sd3[0] - sd1[0], sd3[1] - sd1[1], sd3[2] - sd1[2] ]
    #calculating e1hat dot (v3-v1)
    dotprod = e1bar[0]*v3_minus_v1[0] + e1bar[1]*v3_minus_v1[1] + e1bar[2]*v3_minus_v1[2]
    #multiplying e1hat * [e1hat dot (v3-v1)]
    e1_mult_e1dot = [ e1bar[0]*dotprod , e1bar[1]*dotprod , e1bar[2]*dotprod ]
    #e2bar = v3-v1 - e1hat * [e1hat dot (v3-v1)]
    e2bar = [v3_minus_v1[0]-e1_mult_e1dot[0] , v3_minus_v1[1]-e1_mult_e1dot[1] , v3_minus_v1[2]-e1_mult_e1dot[2] ]
    #calculating normal of e2bar
    e2barNorm = math.sqrt(pow(e2bar[0],2)+pow(e2bar[1],2)+pow(e2bar[2],2))
    #e2hat = e2bar/e2barNorm
    e2hat = [ e2bar[0]/e2barNorm , e2bar[1]/e2barNorm , e2bar[2]/e2barNorm]
    
    #cross product // e3hat = e1hat x e2hat
    e30= e1hat[1]*e2hat[2]-e1hat[2]*e2hat[1]
    e31= e1hat[2]*e2hat[0]-e1hat[0]*e2hat[2]
    e32= e1hat[0]*e2hat[1]-e1hat[1]*e2hat[0]
    e3hat = [e30, e31, e32]
    
    #dissasemble e1hat e2hat e3hat
    [X1,Y1,Z1] = e1hat
    [X2,Y2,Z2] = e2hat
    [X3,Y3,Z3] = e3hat    
    
    
    #find u,v,w
    myu=pow(d1,2)-pow(d2,2)+pow(U,2)
    myu/=(2*U)
    myv=pow(d1,2)-pow(d3,2)+pow(Vx,2)+pow(Vy,2)-2*myu*Vx
    myv/=(2*Vy)
    myw=-(math.sqrt(abs(pow(d1,2)-pow(myu,2)-pow(myv,2))))
    
    #disassemble offsets
    [xoff,yoff,zoff]=originalPos
    
    #calculate x,y,z from u,v,w
    x = xoff + myu*X1 + myv*X2 + myw*X3
    y = yoff + myu*Y1 + myv*Y2 + myw*Y3
    z = zoff + myu*Z1 + myv*Z2 + myw*Z3
    print ("UD#",ud_pid, "located at (x,y,z):",x,y,z)
    print("")

#checks the list to see if ud_pid has 3 matches with unique SDs
def checkList(data, ud_pid, original, sd_coords):
    listLength = len(data)
    foundBool=False
    for i in range(listLength):
        ctr=0
        sd_pids=[]
        distances=[]
        for j in range(listLength):
            
            #if the counter hits 3, 
            if (ctr==3):
                foundBool=True
                break
            
            #if list is empty
            elif (ud_pid == data[j][1]) and (not sd_pids):
                sd_pids.append(data[j][0])
                distances.append(data[j][2])
                ctr+=1
                
            #otherwise
            elif (ud_pid == data[j][1]):
                #check the sd_pids and make sure it is not a duplicate
                myBool = True
                for k in range(ctr): #sweeps the sd_pids list
                    #if the sd_pid is found, it won't append
                    if (sd_pids[k] == data[j][0]):
                        myBool = False
                #otherwise, it'll append to the distances and sd_pids
                if myBool:
                    sd_pids.append(data[j][0])
                    distances.append(data[j][2])
                    ctr+=1
        if foundBool:
            break
    #after the loop is done, sd_pids should have 3
    if foundBool:
        GPSfunc(distances, original, sd_coords, ud_pid, sd_pids)
          
######################################
##### THIS IS THE SERVER PROCESS #####
######################################

if __name__ == "__main__":
   
   #build queues for different purposes
    sdq = multiprocessing.Queue()           #transmitting SD IDs
    udq = multiprocessing.Queue()           #transmitting UD IDs
    
    #a list for all the queues for each SD
    sd2mainQ = multiprocessing.Queue()
   
    #list for storing all UD processes
    ud_processes = []
    sd_processes = []
    
    sd_pipes = []
    ud_pipes = []
    #given that you want i * j pipes,
    userInpSD = 3
    userInpUD = 2
    
    pipeGrid = []
    pipeGrid2 = []
    pipeGridRow = []
    pipeGridRow2 = []
    #assemble the I x J grid that stores all the connections
    for i in range (userInpSD):     
        pipeGridRow = []                                 # empty pipe grid row
        pipeGridRow2 = []
        for j in range (userInpUD):                      #
            sd_conn, ud_conn = multiprocessing.Pipe()    # creating a pipe
            connections = [sd_conn, ud_conn]             # renaming for easier use of pipes
            pipeGridRow.append(connections)              # store each connection in pipeGrid so it can be referenced later.
            
            sd_conn, ud_conn = multiprocessing.Pipe()    # creating a pipe
            connections = [sd_conn, ud_conn]             # renaming for easier use of pipes
            pipeGridRow2.append(connections)
            
        pipeGrid.append(pipeGridRow)                     # store the pipe grid row in the pipe grid
        pipeGrid2.append(pipeGridRow2)
   
    #initialize SDs
    for i in range(userInpSD):                           # for each SD, assemble the connection grid
        sd_pipes = []                                    # clear sd_pipes 
        sd_pipes2 = []
        for j in range (userInpUD):                      # loop through the row
            sd_pipes.append(pipeGrid[i][j])              # append the connection in pipeGrid[i][j] to sd_pipe
            sd_pipes2.append(pipeGrid2[i][j])
        process = multiprocessing.Process(target=sd, args=(sd_pipes, sd_pipes2, sd2mainQ, sdq))
        sd_processes.append(process)                     # add SD to the sd_processes list
        process.start()                                 # start the process
    
    #initialize UDs
    for i in range(userInpUD):                           # for each UD, assemble the connection grid
        ud_pipes = []                                    # clear sd_pipes
        ud_pipes2 = []
        for j in range (userInpSD):                      # loop through the column
            ud_pipes.append(pipeGrid[j][i])              # append the connection in pipeGrid[j][i] to ud_pipes   
            ud_pipes2.append(pipeGrid2[j][i])
        process = multiprocessing.Process(target=ud, args=(ud_pipes, ud_pipes2, udq))
        ud_processes.append(process)                     # add UD to the ud_processes list    
        process.start()
              
    #wait for 2 sec
    time.sleep(2)
    
    #initialize vars for storage/tracking
    sd_ids = []
    sd_len = 0
    ud_ids = []
    ud_len = 0
    ctr = 0;
    
    sd_xpos = []
    sd_ypos = []
    sd_zpos = []
    
    data_storage = []
    print("[SD_PID, UD_PID, DISTANCE]")
    while 1:
        ctr+=1
        
        # store all SD IDs, coords, and increments counter
        while sdq.empty() is False:
            sdInfo = sdq.get()
            sd_xpos.append(sdInfo[0])
            sd_ypos.append(sdInfo[1])
            sd_zpos.append(sdInfo[2])
            sd_ids.append(sdInfo[3])
            sd_len+=1
            
        # store all UD IDs and increment counter
        while udq.empty() is False:
            ud_ids.append(udq.get())   
            ud_len+=1
        
        #recieve data from each SD
        while sd2mainQ.empty() is False:
            # EVERY DATA THAT IS PULLED OUT OF THE QUEUE IS GOING TO BE [TIME, UD_PID, SD_PID]
            myData = sd2mainQ.get() #store time, ud_pid, sd_pid
            print(myData)
            
            #locates where in array to store the data
            data_storage.append(myData)
                
                
       
        time.sleep(.3)
        
        if (ctr%25==0):
            print("\nList\n")
            for i in range(ud_len):
                print("UD#",i,", ID:",ud_ids[i])
            print("")
            for i in range(sd_len):
                print("SD#",i,", ID:",sd_ids[i])
            print("")            
            
            origin = [ sd_xpos[0], sd_ypos[0], sd_zpos[0] ]
            sd_coords = [sd_xpos, sd_ypos, sd_zpos]
            for i in range(ud_len):
                checkList(data_storage,ud_ids[i], origin, sd_coords)
            
